package com.jerryhehman.howto.springjparest.eval.repository.customimpl;

import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Repository;

import com.jerryhehman.howto.springjparest.eval.dao.PersonDAO;
import com.jerryhehman.howto.springjparest.eval.domain.Person;
import com.jerryhehman.howto.springjparest.repository2.PersonRepository;

/**
 * The implementation of the custom Person Repository interface. Spring requires that this class be named as the
 * the repository class (PersonRepository) + "Impl". Note that this class implements the {@link SchoolRepositoryCustom}
 * interface, but not the {@link PersonRepository} interface. If it implemented the later, this class would need
 * to implement all of the methods of that interface and we would lose the advantage that Spring gives us by
 * automatically implementing the code for those methods. This class implements methods that require
 * functionality that cannot be generated by Spring. This follows what is described here:
 * http://docs.spring.io/spring-data/jpa/docs/1.9.2.RELEASE/reference/html/#repositories.custom-implementations
 * 
 * Unfortunately, although the methods in this class are valid JPA methods, they are not available as REST endpoints and do not appear in the HATEOAS output.
 * The reason is found at: http://stackoverflow.com/questions/25201306/implementing-custom-methods-of-spring-data-repository-and-exposing-them-through
 * 
 *
 * @author Jerry Hehman
 *
 */
//@Repository
public class PersonRepositoryImpl implements PersonRepositoryCustom {

	@Autowired
	private PersonDAO personDAO;

	/** 
	 * Implements custom functionality around a call to a repository method. This method validates that the ZipCdPrefix is 3-5 digits.   
	 */
	@Override
	public List<Person> searchZipCdPrefix(String zipCdPrefix, Pageable pageable) {
		System.out.println("zipCdPrefixSearch. prefix = " + zipCdPrefix);
		if (zipCdPrefix == null) throw new IllegalArgumentException("zipCdPrefix cannot be null");

		if (zipCdPrefix.length()<3 || zipCdPrefix.length() > 5) throw new IllegalArgumentException("zipCdPrefix must be between 3 and 5 digits");
		
		if (!zipCdPrefix.matches("\\d+")) throw new IllegalArgumentException("zipCdPrefix must be numeric");
		
		return personDAO.findByNamedQueryAndNamedParam("Person.zipCdPrefixSearch", "zipCdPrefix", zipCdPrefix + "%");
	}


}
